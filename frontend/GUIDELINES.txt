# Vault - Guidelines de Design e Desenvolvimento

## 1. Design System

### 1.1 Cores
- **Fundo Principal**: `bg-zinc-900`
- **Fundo Secundário**: `bg-zinc-800`
- **Bordas**: `border-zinc-700`
- **Texto Primário**: `text-white`
- **Texto Secundário**: `text-zinc-400`
- **Placeholders**: `text-zinc-500`
- **Botões**: 
  - Normal: `bg-zinc-700`
  - Hover: `bg-zinc-600`
  - Foco: `ring-zinc-500`
  - Disabled: `opacity-50 cursor-not-allowed`

### 1.2 Tipografia
- **Títulos**:
  - Principal: `text-xl font-medium`
  - Secundário: `text-lg font-medium`
- **Texto**:
  - Normal: `text-sm`
  - Pequeno: `text-xs`
- **Fontes**: Sistema padrão (system-ui)
- **Alinhamento**: 
  - Centralizado: `text-center`
  - Esquerda: `text-left`

### 1.3 Espaçamento
- **Padding**:
  - Container: `p-8`
  - Elementos: `px-3 py-2`
  - Botões: `py-2 px-4`
- **Margin**:
  - Entre seções: `mb-8`
  - Entre elementos: `space-y-4` ou `space-y-6`
  - Títulos: `mb-2`
- **Gap**: `gap-4`

### 1.4 Bordas e Cantos
- **Raio de Borda**: `rounded-lg` ou `rounded-xl`
- **Bordas**: `border border-zinc-700`
- **Sombras**: Não utilizadas no tema dark

### 1.5 Flexbox
- **Container**: `flex`
- **Centralização**: `items-center justify-center`
- **Altura**: `min-h-screen` ou `h-screen`
- **Largura**: `w-full` ou `w-64`

## 2. Componentes

### 2.1 Layout
- **Container Principal**: `min-h-screen` ou `h-screen`
- **Sidebar**: `w-64`
- **Conteúdo Principal**: `flex-1`
- **Cards**: `max-w-md w-full`

### 2.2 Inputs
```tsx
className="appearance-none rounded-lg relative block w-full px-3 py-2 bg-zinc-900 border border-zinc-700 placeholder-zinc-500 text-white focus:outline-none focus:ring-2 focus:ring-zinc-600 focus:border-transparent sm:text-sm"
```

### 2.3 Botões
```tsx
className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-lg text-white bg-zinc-700 hover:bg-zinc-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-zinc-500 disabled:opacity-50 disabled:cursor-not-allowed"
```

### 2.4 Cards
```tsx
className="bg-zinc-800 rounded-xl border border-zinc-700 p-8"
```

### 2.5 Loading States
```tsx
className="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
```

## 3. Padrões de Código

### 3.1 Estrutura de Arquivos
```
src/
  ├── app/
  │   ├── components/
  │   ├── login/
  │   │   └── page.tsx
  │   ├── page.tsx
  │   └── layout.tsx
  ├── styles/
  └── types/
```

### 3.2 Convenções de Nomenclatura
- **Componentes**: PascalCase
- **Arquivos**: kebab-case
- **Funções**: camelCase
- **Tipos/Interfaces**: PascalCase com prefixo I (ex: IUserProps)
- **Estados**: camelCase com prefixo is para booleanos (ex: `isLoading`)

### 3.3 Imports
- React e Next.js primeiro
- Componentes locais depois
- Utilitários por último

### 3.4 Estados
- Usar `useState` para estados locais
- Nomes descritivos para estados
- Prefixo `is` para booleanos (ex: `isLoading`)
- Tipagem explícita para estados (ex: `useState<'passwords' | 'totp'>`)

## 4. Responsividade

### 4.1 Breakpoints
- Mobile: < 640px
- Tablet: 640px - 1024px
- Desktop: > 1024px

### 4.2 Classes Responsivas
- `sm:` para tablet
- `md:` para desktop
- `lg:` para telas grandes

## 5. Acessibilidade

### 5.1 ARIA
- Usar `aria-label` quando necessário
- Implementar `role` apropriado
- Manter `alt` em imagens
- Labels ocultos com `sr-only`

### 5.2 Navegação
- Suporte a teclado
- Foco visível
- Ordem lógica de tabulação

## 6. Performance

### 6.1 Otimizações
- Lazy loading de componentes
- Imagens otimizadas
- Minimizar re-renders

### 6.2 Loading States
- Skeleton loaders
- Spinners consistentes
- Feedback visual de ações
- Animações suaves

## 7. Internacionalização

### 7.1 Textos
- Manter textos em português
- Preparar para futura tradução
- Evitar textos hardcoded

## 8. Segurança

### 8.1 Formulários
- Validação client-side
- Sanitização de inputs
- Feedback de erros claro
- Campos required quando necessário

### 8.2 Autenticação
- Tokens JWT
- Refresh tokens
- Proteção de rotas

## 9. Testes

### 9.1 Tipos de Testes
- Unitários
- Integração
- E2E

### 9.2 Cobertura
- Componentes principais
- Fluxos críticos
- Edge cases

## 10. Versionamento

### 10.1 Commits
- Mensagens descritivas
- Referência a issues
- Tipo de mudança

### 10.2 Branches
- `main`: produção
- `develop`: desenvolvimento
- `feature/*`: novas funcionalidades
- `fix/*`: correções 