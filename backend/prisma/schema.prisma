// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  username     String      @unique
  email        String?     @unique
  passwordHash String
  role         String      @default("user") // "user" or "admin"
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  credentials  Credential[]
  totps        TOTP[]
  auditLogs    AuditLog[]
}

model Credential {
  id                      String   @id @default(uuid())
  userId                  String
  serviceName             String
  loginUsernameEncrypted  String
  loginPasswordEncrypted  String
  usernameIv              String   // IV para criptografia do username
  usernameAuthTag         String   // Auth tag para criptografia do username
  passwordIv              String   // IV para criptografia da password
  passwordAuthTag         String   // Auth tag para criptografia da password
  salt                    String   // Salt para derivação da chave
  favorite                Boolean  @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TOTP {
  id                   String   @id @default(uuid())
  userId               String
  serviceName          String
  totpSecretEncrypted  String
  iv                   String   // IV for encryption
  authTag              String   // Auth tag for encryption
  salt                 String   // Salt for key derivation
  favorite             Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?  // Can be null for failed login attempts
  eventType String   // LOGIN_SUCCESS, LOGIN_FAILED, USER_REGISTERED, CREDENTIAL_CREATED, TOTP_CREATED
  details   Json?    // Additional event details (IP, user agent, etc.)
  ipAddress String?  // IP address of the request
  userAgent String?  // User agent string
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}
